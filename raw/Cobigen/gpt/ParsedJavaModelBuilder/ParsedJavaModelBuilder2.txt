@SuppressWarnings("unchecked")
private void extractAnnotationsRecursively(Map<String, Object> annotationsMap, List<JavaAnnotation> annotations) {
  for (JavaAnnotation annotation : annotations) {
    Map<String, Object> annotationParameters = new HashMap<>();
    annotationsMap.put(annotation.getType().getCanonicalName().replaceAll("\\.", "_"), annotationParameters);
    for (String propertyName : annotation.getPropertyMap().keySet()) {
      Object value = annotation.getNamedParameter(propertyName);
      if (value instanceof List<?> && !((List<?>) value).isEmpty() && ((List<?>) value).get(0) instanceof JavaAnnotation) {
        List<Map<String, Object>> recursiveAnnotationList = new LinkedList<>();
        annotationParameters.put(propertyName, recursiveAnnotationList);
        for (JavaAnnotation a : (List<JavaAnnotation>) value) {
          Map<String, Object> annotationParameterParameters = new HashMap<>();
          extractAnnotationsRecursively(annotationParameterParameters, Collections.singletonList(a));
          recursiveAnnotationList.add(annotationParameterParameters);
        }
      } else if (value instanceof Enum<?>[]) {
        List<String> enumValues = new LinkedList<>();
        for (Enum<?> e : (Enum<?>[]) value) {
          enumValues.add(e.toString());
        }
        annotationParameters.put(propertyName, enumValues);
      } else if (value instanceof Object[]) {
        annotationParameters.put(propertyName, value);
      } else if (value instanceof Enum<?>) {
        annotationParameters.put(propertyName, ((Enum<?>) value).toString());
      } else if (value instanceof Collection<?> || value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long
          || value instanceof Float || value instanceof Double || value instanceof Boolean
          || value instanceof Character || value instanceof String) {
        annotationParameters.put(propertyName, value);
      } else {
        // Currently QDox only returns the expression stated in the code as value, but not resolves it. So value is always of type String and for this ParsedJavaModelBuilder we always come into the else-part
        annotationParameters.put(propertyName, value != null ? value.toString() : null);
      }
    }
  }
}
