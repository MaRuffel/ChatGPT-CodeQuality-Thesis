  @SuppressWarnings("unchecked")
  private void extractAnnotationsRecursively(Map<String, Object> annotationsMap, List<JavaAnnotation> annotations) {

    for (JavaAnnotation annotation : annotations) {
      Map<String, Object> annotationParameters = new HashMap<>();
      annotationsMap.put(annotation.getType().getCanonicalName().replaceAll("\\.", "_"), annotationParameters);

      for (String propertyName : annotation.getPropertyMap().keySet()) {
        Object value = annotation.getNamedParameter(propertyName);
        if (value instanceof List<?> && ((List<?>) value).size() > 0
            && ((List<?>) value).get(0) instanceof JavaAnnotation) {
          List<Map<String, Object>> recursiveAnnotationList = Lists.newLinkedList();
          annotationParameters.put(propertyName, recursiveAnnotationList);
          for (JavaAnnotation a : (List<JavaAnnotation>) value) {
            Map<String, Object> annotationParameterParameters = new HashMap<>();
            extractAnnotationsRecursively(annotationParameterParameters, Lists.newArrayList(a));
            recursiveAnnotationList.add(annotationParameterParameters);
          }
        } else if (value instanceof Enum<?>[]) {
          List<String> enumValues = Lists.newLinkedList();
          for (Enum<?> e : ((Enum<?>[]) value)) {
            enumValues.add(e.name());
          }
          annotationParameters.put(propertyName, enumValues);
        } else if (value instanceof Object[]) {
          annotationParameters.put(propertyName, value);
          // annotationParameters.put(propertyName, Lists.newLinkedList(Arrays.asList(value)));
        } else if (value instanceof Enum<?>) {
          annotationParameters.put(propertyName, ((Enum<?>) value).name());
        } else if (value instanceof Collection<?>) {
          annotationParameters.put(propertyName, value);
        } else if (value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long
            || value instanceof Float || value instanceof Double || value instanceof Boolean
            || value instanceof Character) {
          annotationParameters.put(propertyName, value);
        } else if (value instanceof String) {
          annotationParameters.put(propertyName, value);
        } else {
          // currently QDox only returns the expression stated in the code as value, but not
          // resolves it. So value is always of type String and for this ParsedJavaModelBuilder we
          // always come into the else-part
          annotationParameters.put(propertyName, value != null ? value.toString() : null);
        }
      }
    }
  }