public PredictionDataTo getNextWeekPrediction(PredictionSearchCriteriaTo criteria) {
Objects.requireNonNull(criteria, "Criteria cannot be null");
List<Double> temperatures = Objects.requireNonNull(criteria.getTemperatures(), "Temperatures cannot be null");
List<Boolean> holidays = Objects.requireNonNull(criteria.getHolidays(), "Holidays cannot be null");
if (temperatures.size() != holidays.size()) {
throw new IllegalArgumentException("Temperatures and holidays lists must have the same size");
}

LOG.debug("Generate predictions for next week.");

try (PredictionDayDataRepository repository = this.predictionDayDataRepository;
     EntityManager entityManager = this.entityManager) {
    repository.deletePredictionForecastData();

    IntStream.range(0, temperatures.size())
            .mapToObj(i -> new PredictionForecastDataEntity(i + 1, temperatures.get(i), holidays.get(i) ? 1 : 0))
            .forEach(entityManager::persist);

    List<PredictionDayData> predictionDayDataEtos = this.dishRepository.findAll().stream()
            .peek(dish -> train(dish, criteria.getStartBookingdate()))
            .map(this::generatePredictionFor)
            .flatMap(List::stream)
            .collect(Collectors.toList());

    PredictionDataTo predictionDataTo = new PredictionDataTo();
    predictionDataTo.setData(predictionDayDataEtos);
    return predictionDataTo;
}
}

private List<PredictionDayData> generatePredictionFor(DishEntity dish) {
// generate prediction data for dish and return a list of PredictionDayData objects
// ...
}