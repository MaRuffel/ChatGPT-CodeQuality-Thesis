void tryEmitScalar(U value) {
    if (get() == EMPTY && compareAndSet(EMPTY, BUSY)) {
        long requestedCount = requested.get();
        SimpleQueue<U> mainQueue = getMainQueue();
        SimpleQueue<U> currentQueue = queue;
        if (requestedCount != NO_REQUESTS && (currentQueue == null || currentQueue.isEmpty())) {
            emitScalar(value, mainQueue, requestedCount);
        } else {
            addToQueue(value, mainQueue, currentQueue);
        }
        if (decrementAndGet() == EMPTY) {
            return;
        }
    } else {
        addToQueue(value, getMainQueue(), queue);
        if (getAndIncrement() != EMPTY) {
            return;
        }
    }
    drainLoop();
}

private void emitScalar(U value, SimpleQueue<U> queue, long requestedCount) {
    downstream.onNext(value);
    if (requestedCount != Long.MAX_VALUE) {
        requested.decrementAndGet();
    }
    if (maxConcurrency != Integer.MAX_VALUE && !cancelled && ++scalarEmitted == scalarLimit) {
        scalarEmitted = EMPTY;
        upstream.request(scalarLimit);
    }
}

private void addToQueue(U value, SimpleQueue<U> mainQueue, SimpleQueue<U> currentQueue) {
    if (currentQueue == null) {
        currentQueue = mainQueue;
    }
    if (!currentQueue.offer(value)) {
        onError(new QueueOverflowException());
    }
}

private SimpleQueue<U> getMainQueue() {
    // ...
}

private void drainLoop() {
    // ...
}

private static final int EMPTY = 0;
private static final int BUSY = 1;
private static final long NO_REQUESTS = 0L;
Note that I've used named constants (EMPTY, BUSY, NO_REQUESTS) instead of magic numbers, and I've broken up the original method into three smaller methods (emitScalar, addToQueue, and getMainQueue) to make it more modular. I've also added comments to help explain what the code is doing.