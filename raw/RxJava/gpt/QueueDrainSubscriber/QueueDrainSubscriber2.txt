protected final void emitOrderedMaxValue(U value, boolean delayError, Disposable dispose) {
    final Subscriber<? super V> subscriber = downstream;
    final SimplePlainQueue<U> queue = this.queue;
    
    if (fastEnter()) {
        long requestedCount = requested.get();
        if (requestedCount != 0L) {
            if (queue.isEmpty()) {
                if (accept(subscriber, value)) {
                    if (requestedCount != Long.MAX_VALUE) {
                        produced(1);
                    }
                }
                if (leave(-1) == 0) {
                    return;
                }
            } else {
                queue.offer(value);
            }
        } else {
            handleBackpressureError(subscriber, dispose);
            return;
        }
    } else {
        queue.offer(value);
        if (!enter()) {
            return;
        }
    }
    
    try (dispose) {
        QueueDrainHelper.drainMaxLoop(queue, subscriber, delayError, dispose, this);
    }
}

private void handleBackpressureError(Subscriber<? super V> subscriber, Disposable dispose) {
    cancelled = true;
    dispose.dispose();
    subscriber.onError(MissingBackpressureException.createDefault());
}
