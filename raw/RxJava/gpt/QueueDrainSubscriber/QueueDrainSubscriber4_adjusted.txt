    protected final void fastPathOrderedEmitMax(U value, boolean delayError, Disposable dispose) {
        Subscriber<? super V> downstreamSubscriber = downstream;
        SimplePlainQueue<U> localQueue = queue;

        if (!fastEnter()) {
            localQueue.offer(value);
            if (!enter()) {
                return;
            }
        }

        try {
            long requestedCount = requested.get();
            if (requestedCount == 0L) {
                cancelled = true;
                dispose.dispose();
                downstreamSubscriber.onError(MissingBackpressureException.createDefault());
                return;
            }

            if (localQueue.isEmpty()) {
                if (accept(downstreamSubscriber, value)) {
                    if (requestedCount != Long.MAX_VALUE) {
                        produced(1);
                    }
                }
                if (leave(-1) == 0) {
                    return;
                }
            } else {
                localQueue.offer(value);
            }
        } finally {
            dispose.dispose();
        }

        QueueDrainHelper.drainMaxLoop(localQueue, downstreamSubscriber, delayError, dispose, this);
    }