protected final void fastPathOrderedEmitMax(U value, boolean delayError, Disposable dispose) {
    Subscriber<? super V> downstreamSubscriber = downstream;
    SimplePlainQueue<U> queue = queue;

    if (!fastEnter()) {
        queue.offer(value);
        if (!enter()) {
            return;
        }
    }

    try {
        long requestedCount = requested.get();
        if (requestedCount == 0L) {
            cancelled = true;
            dispose.dispose();
            downstreamSubscriber.onError(MissingBackpressureException.createDefault());
            return;
        }

        if (queue.isEmpty()) {
            if (accept(downstreamSubscriber, value)) {
                if (requestedCount != Long.MAX_VALUE) {
                    produced(1);
                }
            }
            if (leave(-1) == 0) {
                return;
            }
        } else {
            queue.offer(value);
        }
    } finally {
        dispose.dispose();
    }

    QueueDrainHelper.drainMaxLoop(queue, downstreamSubscriber, delayError, dispose, this);
}
