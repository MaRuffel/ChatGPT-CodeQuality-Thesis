        void drain() {
            if (getAndIncrement() != 0) {
                return;
            }
            int missed = 1;
            long e = emitted;
            Subscriber<? super C> a = downstream;
            SpscLinkedArrayQueue<C> q = queue;
            for (;;) {
                long r = requested.get();
                while (e != r) {
                    if (cancelled) {
                        q.clear();
                        return;
                    }
                    boolean d = done;
                    if (d && errors.get() != null) {
                        q.clear();
                        errors.tryTerminateConsumer(a);
                        return;
                    }
                    C v = q.poll();
                    boolean empty = v == null;
                    if (d && empty) {
                        a.onComplete();
                        return;
                    }
                    if (empty) {
                        break;
                    }
                    a.onNext(v);
                    e++;
                }
                if (e == r) {
                    if (cancelled) {
                        q.clear();
                        return;
                    }
                    if (done) {
                        if (errors.get() != null) {
                            q.clear();
                            errors.tryTerminateConsumer(a);
                            return;
                        } else if (q.isEmpty()) {
                            a.onComplete();
                            return;
                        }
                    }
                }
                emitted = e;
                missed = addAndGet(-missed);
                if (missed == 0) {
                    break;
                }
            }
        }